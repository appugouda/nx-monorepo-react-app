{"version":3,"file":"main.js","mappings":";;;;;;;;;;AAAA,yCAA6B;AAC7B,qCAAyB;AAEzB,MAAa,cAAc;IAA3B;QACE,mBAAc,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAEhD,gBAAW,GAAG,CAAC,cAAc,EAAE,QAAQ,EAAE,EAAE;YACzC,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;YAClD,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC;QAEF,YAAO,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE;YAC9B,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;YACjE,UAAU,CAAC;gBACT,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7B,CAAC,EAAE,GAAG,CAAC,CAAC;QACV,CAAC,CAAC;IACJ,CAAC;CAAA;AAdD,wCAcC;;;;;;;;ACjBD;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA,+CAAmC;AACnC,sDAA0C;AAE1C,yCAA6B;AAC7B,qFAAsD;AAEtD,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AAEtB,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AACtD,MAAM,GAAG,GAAG,IAAI,+BAAc,EAAE,CAAC;AACjC,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAChC,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC;AAEH,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAEnD,qCAAqC;AAErC,MAAM,QAAQ,GAAY,EAAE,OAAO,EAAE,2BAA2B,EAAE,CAAC;AACnE,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC3B,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC;AAEH,uBAAuB;AAEvB,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;AACtC,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;IACnC,OAAO,CAAC,GAAG,CAAC,gCAAgC,GAAG,IAAI,GAAG,MAAM,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC;AACH,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC","sources":["webpack://brady-comm/./apps/api/src/app/dataController.ts","webpack://brady-comm/external commonjs \"body-parser\"","webpack://brady-comm/external commonjs \"express\"","webpack://brady-comm/external node-commonjs \"fs\"","webpack://brady-comm/external node-commonjs \"path\"","webpack://brady-comm/webpack/bootstrap","webpack://brady-comm/./apps/api/src/server.ts"],"sourcesContent":["import * as path from 'path';\nimport * as fs from 'fs';\n\nexport class DataController {\n  basePathToData = path.join(__dirname, './data');\n\n  getJsonData = (basePathToData, filename) => {\n    const fname = path.join(basePathToData, filename);\n    return JSON.parse(fs.readFileSync(fname, 'utf-8'));\n  };\n\n  getData = (request, response) => {\n    const data = this.getJsonData(this.basePathToData, 'users.json');\n    setTimeout(function() {\n      return response.send(data);\n    }, 100);\n  };\n}\n","module.exports = require(\"body-parser\");","module.exports = require(\"express\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as express from 'express';\nimport * as bodyParser from 'body-parser';\nimport { Message } from '@brady-comm/api-interfaces';\nimport * as path from 'path';\nimport { DataController } from './app/dataController';\n\nconst app = express();\n\napp.use(express.static(path.join(__dirname, 'dist')));\nconst obj = new DataController();\napp.get('/api/data', (req, res) => {\n  obj.getData(req, res);\n});\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// const routes = appRouter(app, fs);\n\nconst greeting: Message = { message: 'Data Fetching from API...' };\napp.get('/api', (req, res) => {\n  res.send(greeting);\n});\n\n// app._router(routes);\n\nconst port = process.env.port || 3333;\nconst server = app.listen(port, () => {\n  console.log('Listening at http://localhost:' + port + '/api');\n});\nserver.on('error', console.error);\n"],"names":[],"sourceRoot":""}